const jwt = require('jsonwebtoken');
const User = require('../models/User');
const Chat = require('../models/Chat');
const Message = require('../models/Message');

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
const activeConnections = new Map();

const socketHandler = (io) => {
  // Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Socket.io
  io.use(async (socket, next) => {
    try {
      const token = socket.handshake.auth.token || socket.handshake.headers.authorization;
      
      if (!token) {
        return next(new Error('–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'));
      }

      const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key');
      const user = await User.findById(decoded.userId);
      
      if (!user) {
        return next(new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'));
      }

      socket.userId = decoded.userId;
      socket.userData = user;
      next();
    } catch (error) {
      next(new Error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'));
    }
  });

  io.on('connection', async (socket) => {
    console.log(`üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.userData.username} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è`);

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    activeConnections.set(socket.userId, socket.id);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      await User.findByIdAndUpdate(socket.userId, {
        isOnline: true,
        lastSeen: new Date(),
        status: 'online'
      });

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω
      socket.broadcast.emit('user:status', {
        userId: socket.userId,
        status: 'online',
        lastSeen: new Date()
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
    }

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ª–∏—á–Ω—ã–º —á–∞—Ç–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      const userChats = await Chat.find({
        'participants.user': socket.userId,
        isActive: true
      });

      userChats.forEach(chat => {
        socket.join(`chat:${chat._id}`);
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —á–∞—Ç–∞–º:', error);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    socket.on('message:send', async (data) => {
      try {
        const { chatId, content, type = 'text', replyTo, media, location, contact } = data;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–∏—è –≤ —á–∞—Ç–µ
        const chat = await Chat.findById(chatId);
        if (!chat || !chat.isParticipant(socket.userId)) {
          socket.emit('message:error', {
            message: '–î–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É –∑–∞–ø—Ä–µ—â–µ–Ω'
          });
          return;
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const message = new Message({
          chat: chatId,
          sender: socket.userId,
          type,
          content,
          replyTo,
          media,
          location,
          contact,
          metadata: {
            platform: socket.userData.platform || 'web',
            deviceId: socket.handshake.auth.deviceId,
            appVersion: socket.handshake.auth.appVersion
          }
        });

        await message.save();

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
        await chat.updateLastMessage(message);

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        const fullMessage = await Message.findById(message._id)
          .populate('sender', 'username firstName lastName avatar')
          .populate('replyTo', 'content sender');

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞
        io.to(`chat:${chatId}`).emit('message:new', {
          message: fullMessage.getPublicMessage(),
          chatId
        });

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
        socket.emit('message:sent', {
          messageId: message._id,
          chatId,
          timestamp: message.createdAt
        });

        // –û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
        await sendPushNotifications(chat, fullMessage, socket.userId);

      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        socket.emit('message:error', {
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è'
        });
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    socket.on('message:react', async (data) => {
      try {
        const { messageId, emoji } = data;

        const message = await Message.findById(messageId);
        if (!message) {
          socket.emit('message:error', {
            message: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
          });
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–∏—è –≤ —á–∞—Ç–µ
        const chat = await Chat.findById(message.chat);
        if (!chat || !chat.isParticipant(socket.userId)) {
          socket.emit('message:error', {
            message: '–î–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É –∑–∞–ø—Ä–µ—â–µ–Ω'
          });
          return;
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏
        message.addReaction(socket.userId, emoji);
        await message.save();

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
        io.to(`chat:${message.chat}`).emit('message:reaction', {
          messageId,
          reactions: message.reactions,
          chatId: message.chat
        });

      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:', error);
        socket.emit('message:error', {
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∞–∫—Ü–∏–∏'
        });
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
    socket.on('message:read', async (data) => {
      try {
        const { messageId, chatId } = data;

        const message = await Message.findById(messageId);
        if (!message) {
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–∏—è –≤ —á–∞—Ç–µ
        const chat = await Chat.findById(chatId);
        if (!chat || !chat.isParticipant(socket.userId)) {
          return;
        }

        // –û—Ç–º–µ—Ç–∫–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
        message.markAsRead(socket.userId);
        await message.save();

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –≤ —á–∞—Ç–µ
        const unreadCount = chat.unreadCount.get(socket.userId.toString()) || 0;
        if (unreadCount > 0) {
          chat.unreadCount.set(socket.userId.toString(), Math.max(0, unreadCount - 1));
          await chat.save();
        }

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏
        const senderSocketId = activeConnections.get(message.sender.toString());
        if (senderSocketId) {
          io.to(senderSocketId).emit('message:read', {
            messageId,
            readBy: socket.userId,
            chatId
          });
        }

      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ:', error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è
    socket.on('typing:start', async (data) => {
      try {
        const { chatId } = data;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–∏—è –≤ —á–∞—Ç–µ
        const chat = await Chat.findById(chatId);
        if (!chat || !chat.isParticipant(socket.userId)) {
          return;
        }

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        socket.to(`chat:${chatId}`).emit('typing:start', {
          userId: socket.userId,
          username: socket.userData.username,
          chatId
        });

      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—á–∞—Ç–∞–Ω–∏—è:', error);
      }
    });

    socket.on('typing:stop', async (data) => {
      try {
        const { chatId } = data;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–∏—è –≤ —á–∞—Ç–µ
        const chat = await Chat.findById(chatId);
        if (!chat || !chat.isParticipant(socket.userId)) {
          return;
        }

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        socket.to(`chat:${chatId}`).emit('typing:stop', {
          userId: socket.userId,
          chatId
        });

      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—á–∞—Ç–∞–Ω–∏—è:', error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    socket.on('user:status', async (data) => {
      try {
        const { status } = data;

        await User.findByIdAndUpdate(socket.userId, {
          status,
          lastSeen: new Date()
        });

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
        socket.broadcast.emit('user:status', {
          userId: socket.userId,
          status,
          lastSeen: new Date()
        });

      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    socket.on('disconnect', async () => {
      console.log(`üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.userData.username} –æ—Ç–∫–ª—é—á–∏–ª—Å—è`);

      // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      activeConnections.delete(socket.userId);

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        await User.findByIdAndUpdate(socket.userId, {
          isOnline: false,
          lastSeen: new Date(),
          status: 'offline'
        });

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        socket.broadcast.emit('user:status', {
          userId: socket.userId,
          status: 'offline',
          lastSeen: new Date()
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏:', error);
      }
    });
  });

  return io;
};

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function sendPushNotifications(chat, message, senderId) {
  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ FCM —Ç–æ–∫–µ–Ω–æ–≤ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    const participants = chat.participants.filter(p => 
      p.user.toString() !== senderId.toString() && p.isActive
    );

    const userIds = participants.map(p => p.user);
    const users = await User.find({ _id: { $in: userIds } });

    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Firebase Cloud Messaging
    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    console.log(`üì± –û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ ${chat._id}`);
    
    users.forEach(user => {
      if (user.fcmToken) {
        console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.username}`);
        // FCM.send({
        //   token: user.fcmToken,
        //   notification: {
        //     title: message.sender.firstName,
        //     body: message.content || '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
        //   }
        // });
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
  }
}

module.exports = socketHandler;
