version: '3.8'

services:
  # MongoDB база данных
  mongodb:
    image: mongo:7.0
    container_name: messenger-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: messenger
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - messenger-network

  # Redis для кеширования
  redis:
    image: redis:7-alpine
    container_name: messenger-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - messenger-network

  # Backend сервер
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: messenger-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/messenger?authSource=admin
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./uploads:/app/uploads
    depends_on:
      - mongodb
      - redis
    networks:
      - messenger-network
    command: npm run dev

  # Nginx для статических файлов и прокси
  nginx:
    image: nginx:alpine
    container_name: messenger-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./uploads:/var/www/uploads:ro
    depends_on:
      - backend
    networks:
      - messenger-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  messenger-network:
    driver: bridge
